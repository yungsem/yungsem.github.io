import{_ as s,c as a,o as i,a4 as p}from"./chunks/framework.4aTu-Nia.js";const n="/assets/stream-of-tables.DK_VSCqZ.png",t="/assets/result-group.R_7j8XBs.png",c=JSON.parse('{"title":"数据模型","description":"","frontmatter":{},"headers":[],"relativePath":"note/计算机/influxdb/02.Flux语言/数据模型.md","filePath":"note/计算机/influxdb/02.Flux语言/数据模型.md"}'),e={name:"note/计算机/influxdb/02.Flux语言/数据模型.md"},l=p('<h1 id="数据模型" tabindex="-1">数据模型 <a class="header-anchor" href="#数据模型" aria-label="Permalink to &quot;数据模型&quot;">​</a></h1><p>要理解 flux 查询的过程，根据自己的目标写出符合要求的 flux 语句，必须先理解 flux 数据模型，其组成如下：</p><ul><li>Stream of tables</li><li>Table</li><li>Column</li><li>Row</li><li>Group Key 如下图所示：</li></ul><p><img src="'+n+`" alt=""></p><p>默认情况下，正常查询的结果也是已经经过分组的，分组的 group key 是 series key ，即 measurement + tag set + 一个 field key 。</p><p>如果要自己对数据进行分组，可以使用 group() 函数或 window() 函数。</p><p>下面看一个示例，我们使用行协议导入一组数据：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut=100,ngOut=2 1680076800000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut=200,ngOut=4 1680076810000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut=300,ngOut=6 1680076820000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut=400,ngOut=8 1680076830000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut=500,ngOut=10 1680076840000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut=600,ngOut=12 1680076850000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut=700,ngOut=14 1680076860000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut=800,ngOut=16 1680076870000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut=900,ngOut=18 1680076880000000000</span></span>
<span class="line"><span></span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 goodOut=100,ngOut=2 1680076800000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 goodOut=200,ngOut=4 1680076810000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 goodOut=300,ngOut=6 1680076820000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 goodOut=400,ngOut=8 1680076830000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 goodOut=500,ngOut=10 1680076840000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 goodOut=600,ngOut=12 1680076850000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 goodOut=700,ngOut=14 1680076860000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 goodOut=800,ngOut=16 1680076870000000000</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 goodOut=900,ngOut=18 1680076880000000000</span></span></code></pre></div><p>这组数据实际有 4 组 series ，series key 分别是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 ngOut</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB001 goodOut</span></span>
<span class="line"><span>eqp_prod_data,eqpId=SB002 ngOut</span></span></code></pre></div><p>所以默认的查询，返回的结果会有 4 个 table ，我们验证一下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bucket: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pub_bucket&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(start: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2023</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">03</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">29</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T08</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stop: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2023</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">03</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">29</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.000000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fn: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_measurement&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;eqp_prod_data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mean&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>另外需要理解的一点是，flux 函数的操作对象是 table list 中的各个 table ，每次操作都分别作用于 table list 中的每个 table 。用示意图表示如下：</p><p><img src="`+t+'" alt=""></p>',14),h=[l];function d(k,o,r,g,u,E){return i(),a("div",null,h)}const y=s(e,[["render",d]]);export{c as __pageData,y as default};
