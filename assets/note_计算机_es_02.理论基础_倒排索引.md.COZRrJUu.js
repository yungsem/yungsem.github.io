import{_ as t,c as a,o as e,a4 as d}from"./chunks/framework.4aTu-Nia.js";const u=JSON.parse('{"title":"倒排索引","description":"","frontmatter":{},"headers":[],"relativePath":"note/计算机/es/02.理论基础/倒排索引.md","filePath":"note/计算机/es/02.理论基础/倒排索引.md"}'),s={name:"note/计算机/es/02.理论基础/倒排索引.md"},o=d(`<h1 id="倒排索引" tabindex="-1">倒排索引 <a class="header-anchor" href="#倒排索引" aria-label="Permalink to &quot;倒排索引&quot;">​</a></h1><p>倒排索引是搜索引擎的核心技术。下面使用一个例子来说明什么是倒排索引。</p><h2 id="提出问题" tabindex="-1">提出问题 <a class="header-anchor" href="#提出问题" aria-label="Permalink to &quot;提出问题&quot;">​</a></h2><p>假如你有一本书，这本书有 3 页，每页的内容如下：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">第 1 页：我爱机器学习</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">第 2 页：机器学习需要数学</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">第 3 页：数学和编程都很重要</span></span></code></pre></div><p>现在要搜索 <code>机器学习</code> 和 <code>数学</code> 这两个关键词，怎么做？</p><h2 id="正排索引做法-传统做法" tabindex="-1">正排索引做法（传统做法） <a class="header-anchor" href="#正排索引做法-传统做法" aria-label="Permalink to &quot;正排索引做法（传统做法）&quot;">​</a></h2><p>从第 1 页开始找，一直到最后一页，返回这两个关键字所在的页。</p><h2 id="倒排索引做法" tabindex="-1">倒排索引做法 <a class="header-anchor" href="#倒排索引做法" aria-label="Permalink to &quot;倒排索引做法&quot;">​</a></h2><p>先对每一页的内容进行分词处理，提取文档内容中的分词，同时构建出一张 <strong>倒排索引表</strong> ，记录每个分词出现的位置：</p><table><thead><tr><th>分词</th><th>出现的文档（和出现位置）</th></tr></thead><tbody><tr><td>我</td><td>第 1 页 → 位置1</td></tr><tr><td>爱</td><td>第 1 页 → 位置2</td></tr><tr><td>机器学习</td><td>第 1 页 → 位置3，第 2 页 → 位置1</td></tr><tr><td>需要</td><td>第 2 页 → 位置2</td></tr><tr><td>数学</td><td>第 2 页 → 位置3，第 3 页 → 位置1</td></tr><tr><td>编程</td><td>第 3 页 → 位置2</td></tr></tbody></table><p>当搜索 <code>机器学习</code> 和 <code>数学</code> ​时：</p><p>直接查倒排索引表找到：</p><ol><li>机器学习 → 第 1 页、第 2 页</li><li>数学 → 第 2 页、第 3 页</li><li>取交集 → ​第 2 页同时包含两个关键词</li></ol><p>整个过程只需毫秒级，无需扫描全部文档。</p>`,15),i=[o];function r(n,l,h,p,c,_){return e(),a("div",null,i)}const m=t(s,[["render",r]]);export{u as __pageData,m as default};
