import{_ as e,c as o,o as a,a4 as t}from"./chunks/framework.4aTu-Nia.js";const u=JSON.parse('{"title":"字符","description":"","frontmatter":{},"headers":[],"relativePath":"note/计算机/汇编语言/02.数据表示/字符.md","filePath":"note/计算机/汇编语言/02.数据表示/字符.md"}'),c={name:"note/计算机/汇编语言/02.数据表示/字符.md"},d=t('<h1 id="字符" tabindex="-1">字符 <a class="header-anchor" href="#字符" aria-label="Permalink to &quot;字符&quot;">​</a></h1><p>字符在计算机中以其 Unicode 码对应的 UTF-8 编码的形式表示。但是对于英文字符而言，其 UTF-8 编码就等于其 ASCII 码。</p><h2 id="unicode-码" tabindex="-1">Unicode 码 <a class="header-anchor" href="#unicode-码" aria-label="Permalink to &quot;Unicode 码&quot;">​</a></h2><p>早期的字符是使用 ASCII 码表示的，ASCII 码在计算机中存储时只占用一个字节。<a href="https://www.lookuptables.com/text/ascii-table" target="_blank" rel="noreferrer">这里</a> 是完整的 ASCII 码表。ASCII 码最大的问题是它只能表示英文字母和少量的符号。随着计算机在全世界的普及，ASCII 码显然不能满足现状，因为它无法表示其他国家的字符。比如 ASCII 码就无法表示汉字。所以就有了 Unicode 码。Unicode 码为全世界所有的子符都指定了一个唯一的编码（code point）。例如，汉字 <code>严</code> 的 Unicode 码是 <code>4E25</code> 。</p><h2 id="utf-8" tabindex="-1">UTF-8 <a class="header-anchor" href="#utf-8" aria-label="Permalink to &quot;UTF-8&quot;">​</a></h2><p>虽然 Unicode 码唯一标识了每一个字符，但是 Unicode 码在计算机中应该怎么存储，并没有统一的规定。</p><p>我们的第一反应肯定是既然已经编好码了，把编好的码转换成二进制，然后直接存储不就行了，还需要规定什么存储方式？</p><p>直接存储理论上是行的通，但会带来一个明显的问题：会对存储空间造成极大的浪费。</p><p>拿字母 <code>A</code> 举例。如果使用 ASCII 码存储字母 <code>A</code> ，其编码时 <code>41</code> ，只需要一个字节的存储空间。但是如果使用 Unicode 码存储字母 <code>A</code> ，其编码是 <code>0041</code> ，需要两个字节的存储空间。本来一个字节就能搞定的，现在需要两个字节。这会导致文件的大小是原来的 2~3 倍，对存储空间造成极大的浪费。</p><p>于是就出现了多种存储 Unicode 码的方式，目前应用最广泛就是 UTF-8 编码。</p>',10),n=[d];function r(i,s,_,p,l,h){return a(),o("div",null,n)}const f=e(c,[["render",r]]);export{u as __pageData,f as default};
