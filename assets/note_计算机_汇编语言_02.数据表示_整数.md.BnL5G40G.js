import{_ as t,c as e,o as l,a4 as a}from"./chunks/framework.4aTu-Nia.js";const p=JSON.parse('{"title":"整数","description":"","frontmatter":{},"headers":[],"relativePath":"note/计算机/汇编语言/02.数据表示/整数.md","filePath":"note/计算机/汇编语言/02.数据表示/整数.md"}'),d={name:"note/计算机/汇编语言/02.数据表示/整数.md"},r=a('<h1 id="整数" tabindex="-1">整数 <a class="header-anchor" href="#整数" aria-label="Permalink to &quot;整数&quot;">​</a></h1><p>整数分为无符号整数和有符号整数。</p><h2 id="无符号整数" tabindex="-1">无符号整数 <a class="header-anchor" href="#无符号整数" aria-label="Permalink to &quot;无符号整数&quot;">​</a></h2><p>无符号整数在计算机中以原码的形式表示。如整数 9 ，它在计算机中的表示为：<code>0000 1001</code> 。</p><h2 id="有符号整数" tabindex="-1">有符号整数 <a class="header-anchor" href="#有符号整数" aria-label="Permalink to &quot;有符号整数&quot;">​</a></h2><p>有符号整数在计算机中以补码的形式表示。正数的补码就等于其原码，负数的补码是其原码取反再加 1 。如整数 -9 ，要得到它的补码，需要以下 3 个步骤：</p><ol><li>获取 9 的原码。</li><li>将步骤 1 得到的原码逐位取反。</li><li>将步骤 2 的结果加 1 。</li></ol><table><thead><tr><th style="text-align:right;">步骤</th><th style="text-align:left;">结果</th></tr></thead><tbody><tr><td style="text-align:right;">9 的原码</td><td style="text-align:left;">0000 1001</td></tr><tr><td style="text-align:right;">逐位取反</td><td style="text-align:left;">1111 0110</td></tr><tr><td style="text-align:right;">加 1</td><td style="text-align:left;">1111 0111</td></tr><tr><td style="text-align:right;">十六进制</td><td style="text-align:left;">F 7</td></tr></tbody></table><p>所以 -9 在计算机中的表示为：<code>1111 0111</code> 。</p><h2 id="整数相加" tabindex="-1">整数相加 <a class="header-anchor" href="#整数相加" aria-label="Permalink to &quot;整数相加&quot;">​</a></h2><p>从计算机的视角来看，给定一个二进制数，它并不知道这个二进制数表示的是一个无符号整数还是一个有符号整数。所以在进行两个整数的加法运算时，程序员必须清楚参与运算的两个整数分别是什么类型。</p><p>如二进制数 <code>1111 0001</code> ，如果把它看作无符号整数，它对应的是 241 （十进制），但是如果把它看作有符号整数，它对应的就是 -15 （十进制）。</p><p>如果这个二进制数参与加法运算，相应的就会有两种不同的结果，如下面的例子：</p><p><strong>看作无符号整数：</strong></p><table><thead><tr><th style="text-align:right;">十进制</th><th style="text-align:left;">二进制</th></tr></thead><tbody><tr><td style="text-align:right;">241</td><td style="text-align:left;">1111 0001</td></tr><tr><td style="text-align:right;">+ 7</td><td style="text-align:left;">0000 0111</td></tr><tr><td style="text-align:right;">248</td><td style="text-align:left;">1111 1110</td></tr></tbody></table><p><strong>看作有符号整数：</strong></p><table><thead><tr><th style="text-align:right;">十进制</th><th style="text-align:left;">二进制</th></tr></thead><tbody><tr><td style="text-align:right;">-15</td><td style="text-align:left;">1111 0001</td></tr><tr><td style="text-align:right;">+ 7</td><td style="text-align:left;">0000 0111</td></tr><tr><td style="text-align:right;">-8</td><td style="text-align:left;">1111 1110</td></tr></tbody></table><p>在上面两个加法运算中，计算机只负责做加法运算，得到的结果都是 <code>1111 1110</code> ，至于这个结果应该被解释为无符号整数，还是有符号整数，是程序员自己的事。</p>',18),i=[r];function n(o,s,h,g,c,x){return l(),e("div",null,i)}const _=t(d,[["render",n]]);export{p as __pageData,_ as default};
